# -*- coding: utf-8 -*-
"""MandelBrot Set.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1poTlzVbVtG8dk2qBUO6TupCoskb5aS2a
"""



"""# Mandelbrot set bold text

# z -> z*z + c represents the formula of Mendelbrot set 
# we try different values of c to see where the set explodes ( goes to infinity) and where it reamins finite

# c=0 -> 0,0,0,
# c=1 -> 0, 1, 2, 5, 26 -> explodes
# c=-1 -> 0, -1 -> does not explodes (remains finite)
# c = -2 -> remains finite
# c = -3 -> explodes
#....
"""

c = -3
z = 0


z = z * z + c
z

# Commented out IPython magic to ensure Python compatibility.
# %pylab inline

x = numpy.arange(-3, 3, 1)
z = numpy.zeros_like(x)
arr = [x]
for i in range(10):
    z = z*z + x
    arr.append(numpy.abs(z))

arr

for line in arr:
    print("\t\t".join(map(str,line)))

x = numpy.arange(-3, 3, 0.01)
z = numpy.zeros_like(x)
arr = [x]
for i in range(100):
    z = z*z + x
    arr.append(numpy.abs(z)<10)

figure(figsize=(10,10))
imshow(arr, extent=(x.min(), x.max(), 0, 10))
colorbar()

max(x[arr[-2]])

x, X = -2, 1
y, Y = -1, 1

delta = 0.001


re, im = numpy.mgrid[x:X:delta, y:Y:delta]
c = (re + 1j*im).reshape(im.shape[0], -1).T

z = numpy.zeros_like(c)
for i in range(100):
    z = z*z + c # mandelbrot eqn
    
figure(figsize=(20,10))
imshow(numpy.absolute(z), extent=(x,X,y,Y))

x, X = -2, 1
y, Y = -1, 1

delta = 0.001


re, im = numpy.mgrid[x:X:delta, y:Y:delta]
c = (re + 1j*im).reshape(im.shape[0], -1).T

z = numpy.zeros_like(c)
escape = numpy.zeros_like(numpy.absolute(c))
for i in range(100):
    z = z*z + c # mandelbrot eqn
    idx = (numpy.absolute(z) > 4) & (escape == 0)
    escape[idx]  = i
    
figure(figsize=(20,10))
imshow(escape, extent=(x,X,y,Y))

x, X = -0.8, -.5
y, Y = -.35, -.25

delta = 0.0001

re, im = numpy.mgrid[x:X:delta, y:Y:delta]
c = (re + 1j*im).reshape(im.shape[0], -1).T

z = numpy.zeros_like(c)
escape = numpy.zeros_like(numpy.absolute(c))
for i in range(100):
    z = z*z + c # mandelbrot eqn
    idx = (numpy.absolute(z) > 4) & (escape == 0)
    escape[idx]  = i

imshow(escape, extent=(x,X,y,Y))